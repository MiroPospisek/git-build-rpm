#!/usr/bin/perl -w

use strict;
use warnings;
use v5.10;
use Getopt::Long;
use List::Util qw(first);
use IPC::System::Simple 1.17 qw(runx capturex $EXITVAL);
use File::Temp;
use Path::Class;
use File::Path qw(make_path);
use File::Copy qw(move copy);
our $VERSION = '0.96';

Getopt::Long::Configure (qw(bundling));
my %opts = ( git => 'git' );
Getopt::Long::GetOptions(
    'git=s'                 => \$opts{git},
    'spec-file|spec=s'      => \$opts{spec_file},
    'package-name|p=s'      => \$opts{package_name},
    'dist|d=s'              => \$opts{dist},
    'git-branch|branch|b=s' => \$opts{git_branch},
    'rpm-dir|dir=s'         => \$opts{rpm_dir},
    'help|H'                => \$opts{help},
    'quiet!'                => \$opts{quiet},
    'man|M'                 => \$opts{man},
    'version|V'             => \$opts{version},
) or _pod2usage();

# Handle documentation requests.
_pod2usage(
    ( $opts{man} ? ( '-verbose' => 2 ) : ()),
    '-exitval' => 0,
) if $opts{help} or $opts{man};

# Handle version request.
if ($opts{version}) {
    require File::Basename;
    print File::Basename::basename($0), ' ', __PACKAGE__->VERSION, $/;
    exit;
}

# Figure out what branch we're on.
my $git      = $opts{git};
my $git_head = $opts{git_branch} || find_branch();

# Get the name of the project.
my $name = $opts{package_name} || do {
    my @remotes = capturex $git, qw(remote -v);
    my $origin = first { /^origin/ } @remotes;
    $origin ||= $remotes[0];
    die "Cannot detect project name; use --package-name\n"
        unless $origin =~ m{([^/:]+)[.]git\b};
    $1;
};

my $dir = dir $opts{rpm_dir} || File::Temp::tempdir(CLEANUP => 1);
my $spec_file = file $opts{spec_file} || ('dist', "$name.spec");

die "$spec_file does not exist; use --spec-file\n" unless -e $spec_file;

# Extract the name from the spec file.
my $version = do {
    my $fh = $spec_file->open('<:encoding(UTF-8)')
        or die "Cannot open $spec_file: $!\n";
    my $v;
    while (<$fh>) {
        chomp;
        if (/^version:\s*(\S+)/i) {
            $v = $1;
            last;
        }
    }
    $fh->close;
    $v;
} or die "Cannot find version in $spec_file\n";

# Create the SPECS directory and copy the spec file to it.
my $spec_dir = $dir->subdir('SPECS');
make_path $spec_dir->stringify;
my $spec_dest = $spec_dir->file("$name.spec");
copy $spec_file, $spec_dest;

# Create the SOURCES directory and export the repository to it.
print "Archiving $name-$version\n" unless $opts{quiet};
my $src_dir = $dir->subdir('SOURCES');
make_path $src_dir->stringify;
runx $git, 'archive', '--prefix', "$name-$version/", $git_head,
    '-o' => $src_dir->file("$name-$version.tar.gz");

# Determine dist tag, if any.
my $dist = $opts{dist} || do {
    (my $branch = $git_head) =~ s{.+/}{};
    $branch eq 'master' ? '' : (time . ".$branch");
};

# Now build it!
print "Creating RPM\n" unless $opts{quiet};
runx 'rpmbuild', '-ba', '--define', "_topdir $dir",
    ( $opts{quiet} ? '--quiet' : ()),
    ( $dist ? ('--define', "dist $dist") : ()),
    $spec_dest;

# Move the RPMs here.
for my $rpm ($dir->subdir(qw(RPMS noarch))->children) {
    my $bn = $rpm->basename;
    move $rpm, $bn;
    print "* Copy $bn\n" unless $opts{quiet};
}

sub _pod2usage {
    require Pod::Usage;
    Pod::Usage::pod2usage(
        '-verbose'  => 99,
        '-sections' => '(?i:(Usage|Options))',
        '-exitval'  => 1,
        '-input'    => __FILE__,
        @_
    );
}

sub find_branch {
    my @lines = capturex $git, qw(branch -a --contains HEAD)
        or die "Cannot detect current git branch; use --git-branch\n";

    if (my $line = first {/^[*]\s.+$/ } @lines) {
        # Return the branch unless it's detached.
        chomp $line;
        $line =~ s/^[*]\s//;
        return $line unless $line eq '(no branch)';
    }

    if (my $line = first { $_ !~ m{/} && $_ !~ /^[*]/ } @lines) {
        # HEAD is from a local branch.
        chomp $line;
        $line =~ s/^\s+//;
        return $line;
    }

    if (my $line = first { m{/} && $_ !~ /^[*]/ } @lines) {
        # It's a remote branch. Keep only the last part of the name.
        chomp $line;
        return $line if $line =~ s{^\s+remotes/}{};
        return $1 if $line =~ m{([^/]+)$};
    }

    die "Cannot detect current git branch; use --git-branch\n"
}

=head1 Name

git-build-rpm - Build an RPM from a Git repository

=head1 Synopsis

  git build-rpm [--spec-file <file>]

=head1 Usage

  git build-rpm --spec-file myproj.spec

=head1 Description

Given a spec file, this program archives the Git repository and creates an RPM
for it.

=head1 Options

     --spec-file  FILE    Path to RPM spec file.
     --git        PATH    Path to git program.
     --git-branch BRANCH  Git branch to build from.
     --dist       DIST    Name of distribution, used in RPM release name.
     --rpm-dir    DIR     Path to directory for building the RPM.
     --quiet              Print as little as possible.
  -V --version            Print the version number and exit.
  -H --help               Print a usage statement and exit.
  -M --man                Print the complete documentation and exit.

=head1 Options Details

=over

=item C<--spec>

=item C<--spec-file>

  git build-rpm --spec-file myproj.spec
  git build-rpm --spec yourproj.spec

Path to the project spec file. If not specified, defaults to F<dist/$projname.spec>.
where the project name is extracted from the origin remote URL.

=item C<--git>

  git build-rpm --git /path/to/git

Seems like it ought to be able to find git on its own, right? Well, probably;
it default to finding it in your path.

=item C<-b>

=item C<--branch>

=item C<--git-branch>

  git build-rpm --git-branch develop
  git build-rpm --branch master
  git build-rpm -b staging

Specifies the name of the Git branch (or any commit identifier, really) to use
for the build. Defaults to the currently checked-out branch unless the
checkout is detatched, in which case the value will be C<HEAD>.

=item C<--dir>

=item C<--rpm-dir>

  git build-rpm --dir /tmp/foo
  git build-rpm --rpm-dir ~/rpm

Specifies the name of the directory to use for building the RPM. If not
specified, a temporary directory will be created, which will be deleted when
the program exits.

=item C<--quiet>

  git build-rpm --quiet

Normally C<rpmbuild> is quite noisy. Use this option to make things as quiet
as possible. Only errors will show up.

=item C<-H>

=item C<--help>

  git build-rpm --help
  git build-rpm -H

Outputs a brief description of the options and exits.

=item C<-M>

=item C<--man>

  git build-rpm --man
  git build-rpm -M

Outputs this documentation and exits.

=item C<-V>

=item C<--version>

  git build-rpm --version
  git build-rpm -V

Outputs the program name and version and exits.

=back

=head1 Author

David E. Wheeler <david.wheeler@iovation.com>

=head1 Copyright

Copyright (c) 2012 iovation, Inc. All rights reserved.

=cut
